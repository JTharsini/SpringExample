Before start: before BeanPostProcessor : use spring.xml
from BeanPostProcessor : use spring2.xml

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Dependency injection: decouple dependency

Drawing Application: Circle draw(), Triangle draw()

circleInstance.draw();
triangleInstance.draw();

to avoid, application tightly coupled with each shape, can go with polymorphism: Shape <- Triangle, Shape <- Circle.
Now application needs only Shape
Don't know on which type of object I am invoking draw method

can have the following method in the Drawing class

public void draw(Shape shape)
{
	shape.draw();
}

But in some place of this class, needs to instantiate Shape's actual object

==> Class member variable to set the dependency: accept, keep and process it as Shape

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Spring is a container of beans or factory of beans: to manage objects' life cycle

Spring Bean Factory <- xml (configuration)  => Objects

xml file is placed in resource directory

id for bean : to be accessed by application

value of type is injected to Triangle object in xml file (type is a dependency for triangle class) ==> dependency injection

point2 and point3 can't be used in other places. So better to keep them as inner beans. Zero point is a common point
inner bean doesn't need an id

aliases : way to have different name for same bean

id or name or aliase : best practice - id

ref can be id or name or alias, to strict with id ref use idref : not available in latest versions

-----------------------------------------------------------------------------------------------------------------------

List<Point> is specified as list in spring.xml : Spring will cast them to List<Point> ie, suitable generic type

----------------------------------------------------------------------------------------------------------------------

Autowiring intelligently guess which is the reference and reduce configuration

If names of the beans are same as names of a class's member variables, we can ask Spring to autowire those values by name
Bean with id triangleWithPoints3 is autowired

by default autowiring is off

autowiring problem: hard to debug
----------------------------------------------------------------------------------------------------------------------

By default, when Application context is initialized, it reads xml file and creates Spring beans. We can configure so that it creates bean, when getBean() is invoked.

Bean scopes:

Basic:
By default Singleton - only one instance per Spring container.
Prototype - new bean is created with every request or reference. (ref: zero point is connected by reference)

Web-aware context bean scopes:
Request - New bean per request
Session - New bean per session
Global session - New bean per global Http session (portlet context)

Single JVM -> Multiple Spring container is possible -> One instance per container in case of singleton

------------------------------------------------------------------------------------------------------------------------

problem:

Define triangle as singleton. Even though, pointA is defined as prototype. It wont be created again and again since points will be created when triangle is created
when container is initialized.

==> need access for the application context to create multiple instances for prototype.
get access to application context by implementing ApplicationContextAware interface.

-----------------------------------------------------------------------------------------------------------------------

To get the name of a bean in xml, need to implement BeanNameAware interface.

-----------------------------------------------------------------------------------------------------------------------

Bean definition inheritance : inherit common behaviors in bean definition.(Templating)
in inherited one, we can override or add new configuration.

-----------------------------------------------------------------------------------------------------------------------

call back methods during bean lifecycle:
having configuration in both of class and XML for call back methods:
first interface methods get executed.

-----------------------------------------------------------------------------------------------------------------------

Bean post processor : after initializing the beans this will be executed:
to extend the functionality of Spring.
When every bean is initialized it gets invoked
Separate class

-----------------------------------------------------------------------------------------------------------------------

Application doesn't know which implementation it is using to draw

business services: first interface. based on interface view -> then implementation for interface
change on implementation => doesn't need to change classes which are depended on the changed class

-----------------------------------------------------------------------------------------------------------------------

Aspect Oriented Programming or AOP in Spring:

Aspect will be invoked only when a method is invoked by programmer : Not for the call by Spring container

-----------------------------------------------------------------------------------------------------------------------

Advice types: after, before, around

Need to choose least powerful option to write: before or after over around

Advantage of "@Around":
more control
different code
can be shared by before and after code

Best practices:
1. aspect in package name
2. aspect in class name
Naming convention in class name (Eg: appended with Service in class name for Service) facilitate to have easy and enough pointcut

---------------------------------------------------------------------------------------------------------------------------
Configuration of Aspects in annotation over XML:

-readability
-simple

Configuration of Aspects in XML over annotation: 

-legacy code support
-Configuration rather than functionality
transaction : functionality : annoation
debugging the logic : configuration : xml